{"version":3,"file":"static/js/168.a56c5728.chunk.js","mappings":"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","sources":["components/Finish/Finish.styled.jsx","components/Finish/Finish.tsx","components/Movie/Movie.styled.jsx","components/Movie/Movie.tsx","components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.tsx","components/services/API.tsx","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.tsx","pages/Movies/Movies.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { GiFinishLine } from 'react-icons/gi';\r\n\r\nexport const FinishText = styled.p`\r\n  font: inherit;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const FinishContainer = styled.div`\r\n  margin: 36px auto;\r\n`;\r\n\r\nexport const FinishIcon = styled(GiFinishLine)`\r\n  width: 48px;\r\n  fill: tomato;\r\n`;\r\n","import { FinishContainer, FinishText, FinishIcon } from './Finish.styled';\r\n\r\nexport const Finish: React.FunctionComponent = () => {\r\n  return (\r\n    <FinishContainer>\r\n      <FinishText>\r\n        We're sorry, but you've reached the end of search results.\r\n        <FinishIcon />\r\n      </FinishText>\r\n    </FinishContainer>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const MovieListItemContainer = styled.div`\r\n  max-width: 500px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    transform: scale(1.03);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const MovieListItemImage = styled.div`\r\n  position: relative;\r\n  margin-bottom: ${props => props.theme.space[3]}px;\r\n  height: 500px;\r\n`;\r\n\r\n\r\nexport const MoviesListData = styled.div`\r\n  padding: 0 10px 10px 10px;\r\n`;\r\n\r\nexport const MovieHeading = styled.h2`\r\n  margin-bottom: ${props => props.theme.space[2]}px;\r\n`;\r\n\r\nexport const MovieData = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: ${props => props.theme.space[1]}px;\r\n`;\r\n","import {\r\n  findGenres,\r\n  dateOptimizer,\r\n  picturePathPlace,\r\n  titleOptimizer,\r\n} from '../services/API';\r\n\r\nimport { IMovie, IGenre } from '../../types';\r\n\r\nimport {\r\n  MovieListItemContainer,\r\n  MovieListItemImage,\r\n  MoviesListData,\r\n  MovieHeading,\r\n  MovieData,\r\n} from './Movie.styled';\r\n\r\nexport const Movie: React.FunctionComponent<{\r\n  movieInfo: IMovie;\r\n  genres: IGenre[];\r\n}> = ({ movieInfo, genres }) => {\r\n  const { poster_path, title, name, genre_ids, release_date, first_air_date } =\r\n    movieInfo;\r\n  return (\r\n    <MovieListItemContainer>\r\n      <MovieListItemImage>\r\n        <img\r\n          src={picturePathPlace(poster_path)}\r\n          alt={titleOptimizer(title, name)}\r\n        />\r\n      </MovieListItemImage>\r\n      <MoviesListData>\r\n        <MovieHeading>{titleOptimizer(title, name)}</MovieHeading>\r\n        <MovieData>\r\n          <span>{findGenres(genres, genre_ids)}</span>\r\n          <span>&#10072;</span>\r\n          <span>{dateOptimizer(release_date, first_air_date)}</span>\r\n        </MovieData>\r\n      </MoviesListData>\r\n    </MovieListItemContainer>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const MovieList = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100% - 48px);\r\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n  grid-gap: 24px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  list-style: none;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n","import { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { Movie } from '../Movie/Movie';\r\nimport { MovieList } from './MovieList.styled';\r\nimport React from 'react';\r\nimport { IGenre, IMovie } from '../../types';\r\n\r\nexport const MoviesList: React.FunctionComponent<{\r\n  movies: IMovie[];\r\n  genres: IGenre[];\r\n  from: string;\r\n}> = ({ movies, genres, from }) => {\r\n  const location = useLocation();\r\n  return (\r\n    <div style={{ padding: `${(props: any) => props.theme.space[3]}px` }}>\r\n      <MovieList>\r\n        {from === 'home'\r\n          ? movies.map(movie => {\r\n              return (\r\n                <li key={movie.id}>\r\n                  <Link to={`movies/${movie.id}`} state={{ from: location }}>\r\n                    <Movie movieInfo={movie} genres={genres} />\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })\r\n          : movies.map(movie => {\r\n              return (\r\n                <li key={movie.id}>\r\n                  <Link to={`${movie.id}`} state={{ from: location }}>\r\n                    <Movie movieInfo={movie} genres={genres} />\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n      </MovieList>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\nimport { IGenre } from '../../types';\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\nconst KEY = '9d6e6ee2eca71a277d41288e53d88a97';\r\n\r\nexport class SearchMoviesAPI<T extends string, U extends number> {\r\n  searchTrendingMovies = async (page: T) => {\r\n    const url = `trending/movie/week?api_key=${KEY}&page=${page}`;\r\n    try {\r\n      const response = await axios.get(url);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  searchMovies = async (page: U, searchQuery: T) => {\r\n    const url = `search/movie?api_key=${KEY}&query=${searchQuery}&page=${page}`;\r\n    try {\r\n      const response = await axios.get(url);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  searchMovieDetails = async (movieId: T) => {\r\n    const url = `movie/${movieId}?api_key=${KEY}`;\r\n    try {\r\n      const response = await axios.get(url);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  searchMovieCredits = async (movieId: T | undefined) => {\r\n    const url = `movie/${movieId}/credits?api_key=${KEY}`;\r\n    if (typeof movieId === 'string') {\r\n      try {\r\n        const response = await axios.get(url);\r\n        return response;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  searchMovieReviews = async (movieId: T | undefined) => {\r\n    const url = `movie/${movieId}/reviews?api_key=${KEY}`;\r\n    if (typeof movieId === 'string') {\r\n      try {\r\n        const response = await axios.get(url);\r\n        return response;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  searchGenres = async () => {\r\n    const url = `genre/movie/list?api_key=${KEY}`;\r\n    try {\r\n      const response = await axios.get(url);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport function titleOptimizer(title: string, name: string) {\r\n  if (title) {\r\n    return title;\r\n  }\r\n\r\n  if (name) {\r\n    return name;\r\n  }\r\n\r\n  return 'The best film in your life! :)';\r\n}\r\n\r\nexport function dateOptimizer(releaseDate: string, firstDate: string) {\r\n  if (releaseDate) {\r\n    return releaseDate.slice(0, 4);\r\n  }\r\n\r\n  if (firstDate) {\r\n    return firstDate.slice(0, 4);\r\n  }\r\n\r\n  return 'Coming soon! :)';\r\n}\r\n\r\nexport function picturePathPlace(path: string) {\r\n  if (path == null) {\r\n    return 'https://via.placeholder.com/500x600.svg/000000/ffffff?text=Sorry+,+image+loading+is+failed';\r\n  }\r\n\r\n  return `https://image.tmdb.org/t/p/w500${path}`;\r\n}\r\n\r\nexport function findGenres(genres: IGenre[], genreIds: number[]) {\r\n  const genresArray = [];\r\n\r\n  if (!genreIds) {\r\n    return 'Other';\r\n  }\r\n\r\n  for (let id of genreIds) {\r\n    let item = genres.find(genre => genre.id === id);\r\n    if (item === undefined) {\r\n      continue;\r\n    } else {\r\n      genresArray.push(item.name);\r\n    }\r\n  }\r\n\r\n  if (genresArray.length === 0) {\r\n    genresArray.push('Other');\r\n  }\r\n\r\n  if (genresArray.length > 3) {\r\n    return [genresArray[0], genresArray[1], 'Other'].join(', ');\r\n  }\r\n\r\n  return genresArray.join(', ');\r\n}\r\n\r\nexport function movieDetailsGenres(genres: IGenre[]) {\r\n  const genresArray = [];\r\n\r\n  for (let genre of genres) {\r\n    genresArray.push(genre.name);\r\n  }\r\n\r\n  if (genresArray.length === 0) {\r\n    return 'Other';\r\n  }\r\n\r\n  if (genresArray.length > 3) {\r\n    return [genresArray[0], genresArray[1], 'Other'].join(', ');\r\n  }\r\n\r\n  return genresArray.join(', ');\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Form, Field } from 'formik';\r\nimport { GoSearch } from 'react-icons/go';\r\n\r\nexport const SearchIcon = styled(GoSearch)`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\nexport const SearchbarContainer = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const SearchForm = styled(Form)`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  border: 1px solid #e9e8e8;\r\n  overflow: hidden;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const SearchFormButton = styled.button`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 0;\r\n  opacity: 0.6;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  cursor: pointer;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const SearchFormButtonLabel = styled.span`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0;\r\n`;\r\n\r\nexport const SearchFormInput = styled(Field)`\r\n  display: inline-block;\r\n  width: 100%;\r\n  height: 48px;\r\n  font: inherit;\r\n  font-size: 20px;\r\n  outline: none;\r\n  border: none;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  &::placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n","import { Formik } from 'formik';\r\n\r\nimport {\r\n  SearchIcon,\r\n  SearchForm,\r\n  SearchbarContainer,\r\n  SearchFormButton,\r\n  SearchFormButtonLabel,\r\n  SearchFormInput,\r\n} from './SearchBox.styled';\r\n\r\nconst initialValues = { search: '' };\r\n\r\nexport const SearchBox: React.FunctionComponent<{\r\n  onSubmit: (query: string) => void;\r\n  value: string;\r\n}> = ({ onSubmit, value }) => {\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={(values, actions) => {\r\n          actions.setFieldValue('search', value);\r\n          actions.setSubmitting(false);\r\n          actions.resetForm();\r\n          onSubmit(values.search);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => {\r\n          return (\r\n            <SearchbarContainer>\r\n              <SearchForm>\r\n                <SearchFormInput\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  name=\"search\"\r\n                  placeholder=\"Search films and serials\"\r\n                />\r\n                <SearchFormButton type=\"submit\" disabled={isSubmitting}>\r\n                  <SearchIcon />\r\n                  <SearchFormButtonLabel>Search</SearchFormButtonLabel>\r\n                </SearchFormButton>\r\n              </SearchForm>\r\n            </SearchbarContainer>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\r\nimport { SearchBox } from '../../components/SearchBox/SearchBox';\r\nimport { SearchMoviesAPI } from '../../components/services/API';\r\nimport { Finish } from '../../components/Finish/Finish';\r\nimport { IGenre, IMovie } from '../../types';\r\n\r\nconst MoviesAPI = new SearchMoviesAPI();\r\n\r\nexport const Movies = () => {\r\n  const [movies, setMovies] = useState<IMovie[]>([]);\r\n  const [genres, setGenres] = useState<IGenre[]>([]);\r\n  const [page, setPage] = useState<number>(1);\r\n  const [totalPages, setTotalPages] = useState<number | null>(null);\r\n  const [isRendered, setIsRendered] = useState<boolean>(false);\r\n  const [searchQuery, setSearchQuery] = useSearchParams();\r\n  const filmTitle = searchQuery.get('name') ?? '';\r\n  const from = 'movies';\r\n\r\n  useEffect(() => {\r\n    MoviesAPI.searchGenres().then(response => setGenres(response!.data.genres));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filmTitle === '' || !isRendered) {\r\n      setIsRendered(true);\r\n      return;\r\n    }\r\n\r\n    MoviesAPI.searchMovies(page, filmTitle).then(response => {\r\n      setTotalPages(response!.data.total_pages);\r\n      if (response!.data.results.length > 0) {\r\n        toast.success(\r\n          `Hooray! We found ${response!.data.total_results} movies`,\r\n          {\r\n            autoClose: 3000,\r\n          }\r\n        );\r\n        setMovies(prevMovies => [...prevMovies, ...response!.data.results]);\r\n      } else {\r\n        toast.warn('Nothing found for your request', {\r\n          autoClose: 3000,\r\n        });\r\n      }\r\n    });\r\n  }, [page, filmTitle, isRendered]);\r\n\r\n  const submitHandler = (query: string): void => {\r\n    let filmName: { name?: string };\r\n\r\n    if (query.trim() !== '') filmName = { name: query };\r\n    else {\r\n      filmName = {};\r\n      toast.error('Sorry, search field if empty :(', { autoClose: 3000 });\r\n    }\r\n\r\n    if (query !== filmName.name) {\r\n      setMovies([]);\r\n      setPage(1);\r\n    }\r\n\r\n    setSearchQuery(filmName);\r\n  };\r\n\r\n  const scrollHandler = () => {\r\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\r\n\r\n    if (clientHeight + scrollTop + 1 >= scrollHeight) {\r\n      setPage(prevPage => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', scrollHandler);\r\n    return () => window.removeEventListener('scroll', scrollHandler);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <SearchBox value={filmTitle} onSubmit={submitHandler} />\r\n      {movies.length !== 0 && (\r\n        <div>\r\n          <MoviesList movies={movies} genres={genres} from={from} />\r\n        </div>\r\n      )}\r\n      {page === totalPages && <Finish />}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["FinishText","styled","FinishContainer","FinishIcon","GiFinishLine","Finish","MovieListItemContainer","MovieListItemImage","props","theme","space","MoviesListData","MovieHeading","MovieData","Movie","movieInfo","genres","poster_path","title","name","genre_ids","release_date","first_air_date","src","picturePathPlace","alt","titleOptimizer","findGenres","dateOptimizer","MovieList","MoviesList","movies","from","location","useLocation","style","padding","map","movie","to","id","state","axios","KEY","SearchMoviesAPI","searchTrendingMovies","page","url","response","console","log","searchMovies","searchQuery","searchMovieDetails","movieId","searchMovieCredits","searchMovieReviews","searchGenres","releaseDate","firstDate","slice","path","genreIds","genresArray","item","find","genre","undefined","push","length","join","movieDetailsGenres","SearchIcon","GoSearch","SearchbarContainer","SearchForm","Form","SearchFormButton","SearchFormButtonLabel","SearchFormInput","Field","initialValues","search","SearchBox","onSubmit","value","values","actions","setFieldValue","setSubmitting","resetForm","isSubmitting","type","autoComplete","placeholder","disabled","MoviesAPI","Movies","useState","setMovies","setGenres","setPage","totalPages","setTotalPages","isRendered","setIsRendered","useSearchParams","setSearchQuery","filmTitle","get","useEffect","then","data","total_pages","results","toast","total_results","autoClose","prevMovies","scrollHandler","document","documentElement","scrollHeight","clientHeight","scrollTop","prevPage","window","addEventListener","removeEventListener","query","filmName","trim"],"sourceRoot":""}